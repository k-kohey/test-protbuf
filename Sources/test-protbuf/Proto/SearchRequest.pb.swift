// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Proto/SearchRequest.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Corpus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case univarsal // = 1
  case web // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .univarsal
    case 2: self = .web
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .univarsal: return 1
    case .web: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Corpus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Corpus] = [
    .unspecified,
    .univarsal,
    .web,
  ]
}

#endif  // swift(>=4.2)

struct SearchRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var query: String = String()

  /// which page number do we want?
  var pageNumber: Int32 = 0

  var resultPerPage: Int32 = 0

  var corpus: Corpus = .unspecified

  var songName: String {
    get {return _songName ?? String()}
    set {_songName = newValue}
  }
  /// Returns true if `songName` has been explicitly set.
  var hasSongName: Bool {return self._songName != nil}
  /// Clears the value of `songName`. Subsequent reads from it will return its default value.
  mutating func clearSongName() {self._songName = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _songName: String? = nil
}

struct SearchResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var results: [Result] = []

  var projects: Dictionary<String,SearchResponse.Project> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Project {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var projectName: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Corpus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CORPUS_UNSPECIFIED"),
    1: .same(proto: "CORPUS_UNIVARSAL"),
    2: .same(proto: "CORPUS_WEB"),
  ]
}

extension SearchRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SearchRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "query"),
    2: .standard(proto: "page_number"),
    3: .standard(proto: "result_per_page"),
    4: .same(proto: "corpus"),
    5: .standard(proto: "song_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.query) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pageNumber) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.resultPerPage) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.corpus) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._songName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.query.isEmpty {
      try visitor.visitSingularStringField(value: self.query, fieldNumber: 1)
    }
    if self.pageNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.pageNumber, fieldNumber: 2)
    }
    if self.resultPerPage != 0 {
      try visitor.visitSingularInt32Field(value: self.resultPerPage, fieldNumber: 3)
    }
    if self.corpus != .unspecified {
      try visitor.visitSingularEnumField(value: self.corpus, fieldNumber: 4)
    }
    if let v = self._songName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SearchRequest, rhs: SearchRequest) -> Bool {
    if lhs.query != rhs.query {return false}
    if lhs.pageNumber != rhs.pageNumber {return false}
    if lhs.resultPerPage != rhs.resultPerPage {return false}
    if lhs.corpus != rhs.corpus {return false}
    if lhs._songName != rhs._songName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SearchResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SearchResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "results"),
    2: .same(proto: "projects"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.results) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SearchResponse.Project>.self, value: &self.projects) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.results.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.results, fieldNumber: 1)
    }
    if !self.projects.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SearchResponse.Project>.self, value: self.projects, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SearchResponse, rhs: SearchResponse) -> Bool {
    if lhs.results != rhs.results {return false}
    if lhs.projects != rhs.projects {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SearchResponse.Project: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = SearchResponse.protoMessageName + ".Project"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectName.isEmpty {
      try visitor.visitSingularStringField(value: self.projectName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SearchResponse.Project, rhs: SearchResponse.Project) -> Bool {
    if lhs.projectName != rhs.projectName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
